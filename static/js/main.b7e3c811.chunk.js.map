{"version":3,"sources":["firebase.js","components/Suscripcion.js","components/SocialMedia.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firestore","firestore","Suscripcion","useState","email","setEmail","isDisabled","setIsDisabled","error","setError","className","id","onSubmit","e","preventDefault","test","collection","doc","set","createAt","Date","then","res","Swal","fire","title","text","icon","err","message","type","placeholder","name","value","onChange","target","disabled","faCircleNotch","faPaperPlane","spin","style","color","fontSize","SocialMedia","href","rel","faTwitter","faLinkedinIn","faGithub","faCodepen","App","Boolean","window","location","hostname","match","TagManager","initialize","gtmId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"yVAGAA,IAASC,cAAc,CACnBC,OAAQC,0CACRC,WAAYD,yCACZE,YAAaF,gDACbG,UAAWH,yBACXI,cAAeJ,qCACfK,kBAAmBL,eACnBM,MAAON,4CACPO,cAAeP,iBAGZ,IAAMQ,EAAYX,IAASY,YCkEnBC,GDhEAb,EAAf,ECVoB,WAAO,IAAD,EACIc,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,OAEcF,oBAAS,GAFvB,mBAEfG,EAFe,KAEHC,EAFG,OAGIJ,oBAAS,GAHb,mBAGfK,EAHe,KAGRC,EAHQ,KA6CtB,OACI,yBAAKC,UAAU,eACX,0BAAMC,GAAG,eAAeC,SArCV,SAACC,GAEnB,GADAA,EAAEC,iBALY,uJAEAC,KAAKX,GAInB,CAIAG,GAAc,GAEd,IACoBP,EAAUgB,WAAW,iBAAiBC,MAEjDC,IAAI,CACDd,QACAe,SAAU,IAAIC,OAEjBC,MAAK,SAACC,GACHC,IAAKC,KAAK,CACNC,MAAO,gBACPC,KAAM,2CACNC,KAAM,eAGpB,MAAOC,GACLL,IAAKC,KAAK,CACNC,MAAO,0BACPC,KAAME,EAAIC,QACVF,KAAM,UAlBd,QAqBIpB,GAAc,GACdE,GAAS,GACTJ,EAAS,UA5BTI,GAAS,KAmCL,2BACIqB,KAAK,QACLnB,GAAG,QACHoB,YAAY,2BACZC,KAAK,QACLC,MAAO7B,EACP8B,SAAU,SAACrB,GAAD,OAAOR,EAASQ,EAAEsB,OAAOF,UAEvC,4BAAQH,KAAK,SAASnB,GAAG,MAAMyB,SAAU9B,GACrC,kBAAC,IAAD,CACIqB,KAAMrB,EAAa+B,IAAgBC,IACnCC,KAAMjC,EACNkC,MAAO,CAAEC,MAAO,QAASC,SAAU,cAK9ClC,GACG,yBAAKE,UAAU,SACX,uBAAGA,UAAU,mBAAb,mC,OC/BLiC,EAjCK,kBAChB,yBAAKjC,UAAU,gBACX,uBACIkC,KAAK,qCACLC,IAAI,sBACJV,OAAO,UAEP,kBAAC,IAAD,CAAiBR,KAAMmB,OAE3B,uBACIF,KAAK,8CACLC,IAAI,sBACJV,OAAO,UAEP,kBAAC,IAAD,CAAiBR,KAAMoB,OAE3B,uBACIH,KAAK,oCACLC,IAAI,sBACJV,OAAO,UAEP,kBAAC,IAAD,CAAiBR,KAAMqB,OAE3B,uBACIJ,KAAK,qCACLC,IAAI,sBACJV,OAAO,UAEP,kBAAC,IAAD,CAAiBR,KAAMsB,SCjBpBC,EAfH,kBACR,yBAAKxC,UAAU,aACX,yBAAKA,UAAU,UACX,kDACuB,oDAEvB,+CACA,6BACA,kEACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHQyC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCPZC,IAAWC,WAJY,CACnBC,MAAOlE,gBAKXmE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuHzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnB5C,MAAK,SAAC6C,GACHA,EAAaC,gBAEhBC,OAAM,SAAC5D,GACJ6D,QAAQ7D,MAAMA,EAAMqB,c","file":"static/js/main.b7e3c811.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nfirebase.initializeApp({\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n});\n\nexport const Firestore = firebase.firestore();\n\nexport default firebase;\n","import React, { useState } from 'react';\nimport Swal from 'sweetalert2';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane, faCircleNotch } from '@fortawesome/free-solid-svg-icons';\nimport { Firestore } from '../firebase';\n\nconst Suscripcion = () => {\n    const [email, setEmail] = useState('');\n    const [isDisabled, setIsDisabled] = useState(false);\n    const [error, setError] = useState(false);\n\n    const validateEmail = () => {\n        const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n        return !regex.test(email);\n    };\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (validateEmail()) {\n            setError(true);\n            return;\n        }\n        setIsDisabled(true);\n\n        try {\n            const subsRef = Firestore.collection('subscriptions').doc();\n            subsRef\n                .set({\n                    email,\n                    createAt: new Date(),\n                })\n                .then((res) => {\n                    Swal.fire({\n                        title: '¡Éxito!',\n                        text: 'El email se ha registrado correctamente.',\n                        icon: 'success',\n                    });\n                });\n        } catch (err) {\n            Swal.fire({\n                title: 'Algo salió mal... :(',\n                text: err.message,\n                icon: 'error',\n            });\n        } finally {\n            setIsDisabled(false);\n            setError(false);\n            setEmail('');\n        }\n    };\n\n    return (\n        <div className=\"suscripcion\">\n            <form id=\"contact-form\" onSubmit={submitHandler}>\n                <input\n                    type=\"email\"\n                    id=\"email\"\n                    placeholder=\"Correo electrónico...\"\n                    name=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                />\n                <button type=\"submit\" id=\"btn\" disabled={isDisabled}>\n                    <FontAwesomeIcon\n                        icon={isDisabled ? faCircleNotch : faPaperPlane}\n                        spin={isDisabled}\n                        style={{ color: 'white', fontSize: '1.2rem' }}\n                    />\n                </button>\n            </form>\n\n            {error && (\n                <div className=\"error\">\n                    <p className=\"email_val_error\">Ingresa un email válido.</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Suscripcion;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faTwitter,\n    faLinkedinIn,\n    faGithub,\n    faCodepen,\n} from '@fortawesome/free-brands-svg-icons';\n\nconst SocialMedia = () => (\n    <div className=\"social-media\">\n        <a\n            href=\"https://twitter.com/luisr_carrillo\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <FontAwesomeIcon icon={faTwitter} />\n        </a>\n        <a\n            href=\"https://www.linkedin.com/in/luisr-carrillo/\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <FontAwesomeIcon icon={faLinkedinIn} />\n        </a>\n        <a\n            href=\"https://github.com/luisr-carrillo\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <FontAwesomeIcon icon={faGithub} />\n        </a>\n        <a\n            href=\"https://codepen.io/luisr-carrillo/\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <FontAwesomeIcon icon={faCodepen} />\n        </a>\n    </div>\n);\n\nexport default SocialMedia;\n","import React from 'react';\r\nimport './App.css';\r\nimport Suscripcion from './components/Suscripcion';\r\nimport SocialMedia from './components/SocialMedia';\r\n\r\nconst App = () => (\r\n    <div className=\"container\">\r\n        <div className=\"cuadro\">\r\n            <h1>\r\n                Luis R. Carrillo | <span>Desarrollador Web</span>\r\n            </h1>\r\n            <h2>Próximamente</h2>\r\n            <hr />\r\n            <h3>Notificarme cuando este disponible</h3>\r\n            <Suscripcion />\r\n            <SocialMedia />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n        ),\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport TagManager from 'react-gtm-module';\r\nimport 'reset-css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst tagManagerArgs = {\r\n    gtmId: process.env.REACT_APP_GTM_ID,\r\n};\r\n\r\nTagManager.initialize(tagManagerArgs);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}